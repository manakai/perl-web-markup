=head1 NAME

Web::XPath::Parser - An XPath parser

=head1 DESCRIPTION

The C<Web::XPath::Parser> module contains an XPath parser, i.e. a
processor to convert XPath string into its internal data structure
representation.

=head1 METHODS

Following methods are available:

=over 4

=item $parser = Web::XPath::Parser->new

Return a new instance of the parser.

=item $code = $parser->onerror

=item $parser->onerror ($new_code)

Get or set the error handler for the parser.  Any parse error, as well
as warning and information, is reported to the handler.  See
L<Whatpm::Errors>
<https://github.com/wakaba/manakai/blob/master/lib/Whatpm/Errors.pod>
for more information.

=item $code = $parser->ns_resolver

=item $parser->ns_resolver ($new_code)

Get or set the namespace prefix resolver.  It must be a code reference
(or C<undef> to unset).  The code reference will be invoked with an
argument, which is a character string representing the namespace
prefix.  The code reference must return a character string
representing the namespace URL.  The code reference must not throw an
exception.  It must return consistent result.  Note that the null
namespace cannot be represented.

If the namespace resolver is not specified, there is no namespace
binding applicable to XPath expression parsing.

=item $code = $parser->variable_checker

=item $parser->variable_checker ($new_code)

Get or set the variable checker.  It must be a code reference (or
C<undef> to unset).  The code reference will be invoked with two
character string arguments: namespace URL and local name.  If the
namespace URL is C<undef>, it represents the null namespace.  Note
that the empty string is different from C<undef>.  The code reference
must return whether the variable identified by the namespace URL and
local name is defined or not.  The code reference must not throw an
exception.  It must return consistent result.

=item $code = $parser->function_checker

=item $parser->function_checker ($new_code)

Get or set the function checker.  It must be a code reference (or
C<undef> to unset).  The code reference will be invoked with two
character string arguments: namespace URL and local name.  If the
namespace URL is C<undef>, it represents the null namespace.  Note
that the empty string is different from C<undef>.  The code reference
must return whether the function identified by the namespace URL and
local name is defined or not.  If the function is defined, it must
return an array reference with two numbers.  The first number
represents the minimum number of arguments.  The second number
represents the maximum number of arguments.  The first number must be
less than or equal to the second number.  The code reference must not
throw an exception.  It must return consistent result.

=item $parsed = $parser->parse_char_string_as_expression ($string)

Parse the specified character string as an XPath 1.0 expression.  If
the parsing does not fail, it returns the parsed data structure.  If
the parsing fails, it reports the parse errors via the C<onerror>
handler and returns C<undef>.

=back

The parser does not examine whether the input string does not contain
non-Unicode character (i.e. U-00110000) for performance reason.  If
your application would like to fully conform to relevant standards,
you have to ensure that the input does not contain any character
greater than U+10FFFF before invoking the parser.

=head1 SPECIFICATIONS

=over 4

=item XPATH1

XML Path Language (XPath) Version 1.0 <http://www.w3.org/TR/xpath/>.

XML Path Language (XPath) Version 1.0 Specification Errata
<http://www.w3.org/1999/11/REC-xpath-19991116-errata/>.

The C<NCName> production rule in the Namespaces in XML 1.0 (Second
Edition) <http://www.w3.org/TR/2006/REC-xml-names-20060816/#NT-NCName>
MUST be used to parse the XPath expression.  (In other word, changes
made by XML 1.1 or XML 1.0 Fifth Edition are not incorporated and even
for an HTML document the same definition of C<NCName> is applied.)

If the tokenizer can't tokenize the entire input string, it MUST throw
an syntax error and abort the parsing process.

In the C<Literal> production rule, any Unicode code point
(i.e. U+0000-U+10FFFF) MUST be allowed.  (This is a willful violation
to the XPath 1.0 specification for compatibility with browsers.)

The parser MUST resolve any namespace prefix in the input string.  If
the prefix cannot be resolved, it MUST throw a namespace error and
abort the parsing process.

The empty string namespace URL MUST NOT be interpreted as the null
namespace.

The parser MUST examine whether any variable reference in the input
string references a variable included in the variable bindings of the
context.  If the variable is not found, it MUST throw a syntax error
and abort the parsing process.

The parser MUST examine whether any function call in the input string
idetifies a function included in the function library of the context.
If the function is not defined, the number of arguments is less than
the minimum number of acceptable arguments, or the number of argument
is greater than the maximum number of acceptable arguments, then it
MUST throw a syntax error and abort the parsing process.

=back

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 LICENSE

Copyright 2013 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
