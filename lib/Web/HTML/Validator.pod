=head1 NAME

Web::HTML::Validator - DOM Conformance Checker

=head1 SYNOPSIS

  use Web::HTML::Validator;
  my $val = Web::HTML::Validator->new;
  $val->onerror (sub {
    my %arg = @_;
    warn get_node_path ($arg{node}), ": ",
        ($arg{level} || "Error"), ": ",
        $arg{type}, "\n";
  });
  $val->check_node ($doc);

=head1 DESCRIPTION

The Perl module C<Web::HTML::Validator> contains methods for
conformance checking (validation) of DOM tree with regard to relevant
Web standards such as HTML.  Although the module name contains "HTML",
it can also be used to check the conformance of non-HTML XML
documents.  See also L</SPECIFICATIONS>.

=head1 METHODS

This module has following methods:

=over 4

=item $val = Web::HTML::Validator->new

Create a new instance of the validator.

=item $code = $val->onerror

=item $val->onerror ($code)

Get or set the error handler for the validator.  Any conformance
error, as well as warning and additional processing information, is
reported to the handler.  See
<https://github.com/manakai/data-errors/blob/master/doc/onerror.txt>
for details of error handling.

=item $val->check_node ($node)

Validate the specified node.  If the node is not a document node, the
node is validated as if it were an orphaned node, i.e. a node with no
parent or owner.  The node can be an attribute, but element- or
attribute-specific validation is not performed in that case.

Errors and warnings are reported through the C<onerror> handler.

=back

Since the input to the validator is a DOM, not a string, syntax-level
conformance errors can't be checked.  For detecting any conformance
error, you have to parse the string using appropriate parser
(L<Web::HTML::Parser> for HTML, or L<Web::XML::Parser> for XML), and
then invoke the validator with the result DOM as the input.  For XML,
you might also want to invoke DTD validator between invocations of
parser and validator, as this validator does not perform any DTD-based
validation.

=head1 DEPENDENCY

In addition to the dependency described in the README file
<https://github.com/manakai/perl-web-markup/blob/master/README.pod#dependency>,
following modules are required by this module:

=over 4

=item perl-web-css <https://github.com/manakai/perl-web-css>

=item perl-web-datetime <https://github.com/manakai/perl-web-datetime>

=item perl-web-langtag <https://github.com/manakai/perl-web-langtag>

=item perl-web-resource <https://github.com/manakai/perl-web-resource>

=item perl-web-url <https://github.com/manakai/perl-web-url>

=item perl-regexp-utils <https://github.com/wakaba/perl-regexp-utils>

=back

Also, see L<Web::RDF::XML::Parser>'s dependency section.

=head1 SPECIFICATIONS

=over 4

=item XML

Extensible Markup Language (XML) 1.0 <http://www.w3.org/TR/xml/>.

XML 1.0 Fifth Edition Specification Errata
<http://www.w3.org/XML/xml-V10-5e-errata>.

The C<xml:lang> attribute MUST be interpreted as the C<lang> attribute
in the XML namespace.  The C<xml:space> attribute MUST be interpreted
as the C<space> attribute in the XML namespace.  In other words, the
C<xml:lang> or C<xml:space> attribute in no namespace is different
from the attributes defined in the XML specification.

The C<xml:space> attribute MUST NOT be in error.

The description for the C<xml:lang> attribute value in the XML
specification is interpreted as a MUST-level requirement.

Reserved element names, attribute names, and target names MUST NOT be
used unless allowed by an applicable specification.

=item XMLNS

Namespaces in XML 1.0 <http://www.w3.org/TR/xml-names/>.

Namespaces in XML 1.0 (Third Edition) Errata
<http://www.w3.org/XML/2009/xml-names-errata>.

Requirements on the namespace name is updated as follows:

  A namespace name MUST be a valid non-empty URL
  <http://www.whatwg.org/specs/web-apps/current-work/#valid-non-empty-url>.
  It should be an absolute URL
  <http://url.spec.whatwg.org/#concept-absolute-url>.  For the purpose
  of conformance of the HTML |base| element, attributes declaring XML
  namespaces are not defined as taking URLs.

=item XMLBASE

XML Base <http://www.w3.org/TR/xmlbase/>.

XML Base Specification Errata
<http://www.w3.org/2009/01/xmlbase-errata>.

=item HTML

HTML Standard <http://c.whatwg.org/>.

The |html| element in the HTML namespace MAY be used as the root
element.

A |DocumentFragment| MAY contain any child element and text node.

=item OBSVOCAB

manakai's Conformance Checking Guideline for Obsolete HTML Elements
and Attributes
<http://suika.suikawiki.org/www/markup/html/exts/manakai-obsvocab>.

=item XSLT

XSL Transformations (XSLT) Version 1.0 <http://www.w3.org/TR/xslt>.

XSL Transformations (XSLT) Version 1.0 Specification Errata
<http://www.w3.org/1999/11/REC-xslt-19991116-errata/>.

Key words "must" and "should" are to be interpreted as described in
RFC 2119.

=item RDFXML

RDF/XML Syntax Specification (Revised)
<http://www.w3.org/TR/rdf-syntax-grammar/>.

RDF Errata
<http://www.w3.org/2001/sw/RDFCore/errata#rdf-syntax-grammar>.

The C<RDF> element in the RDF namespace is metadata content.

=item ATOM

Atom 1.0, Atom Threading Extension.

For Atom documents, references to RFC 3066 are replaced by references
to BCP 47.

The content model of the C<atom:email> element is updated as follows:
The C<atom:email> element MUST NOT contain child elements.  The
content of the element MUST be text which is a valid e-mail address
[HTML].  (This is a willful violation of RFC 5322 and RFC 4287.)

A C<feed> element in the Atom namespace, when it contains no C<entry>
element in the Atom namespace as child, can but does not have to
contain a child C<author> element in the Atom namespace.  (Per RFC
4287 it is unclear whether there has to be an C<author> child element
or not when the C<feed> element contains no C<entry> element child.)

When the content of an element is HTML, it MUST conform to the
relevant specifications, using the rules for the HTML documents.  When
the content of an element is XHTML, it MUST conform to the relevant
specifications, using rules for the XHTML documents.  (Per RFC 4287,
these are SHOULD-level requirements.  Additionally, it references
obsolete specifications.)

=item CSSSTYLEATTR

CSS Style Attributes <http://dev.w3.org/csswg/css-style-attr/>.

CSS Syntax
<http://dev.w3.org/csswg/css-syntax/#parse-a-list-of-declarations>.

=item MANAKAI

manakai DOM Extensions
<http://suika.suikawiki.org/~wakaba/wiki/sw/n/manakai%20DOM%20Extensions>.

Any node MAY be used as orphan node.

=item VALIDLANGS

Handling of unknown namespaces in conformance checking
<http://suika.suikawiki.org/www/markup/xml/validation-langs>.

=back

The validator also supports much more Web standards (indirectly via
required modules), including but not limited to CSS, URL Standard,
IETF BCP 47 language tags, and Encoding Standard.

Note that XML 1.1, Namespaces in XML 1.1, C<xml:id>, XLink, XHTML
Modularization, Ruby Annotations, and RDFa are not applicable
specifications.  Also, the module does not support historical HTML
features no longer part of the language, except for those explicitly
listed in the OBSVOCAB specification.  See the specification for
details.

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 LICENSE

Copyright 2007-2013 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
