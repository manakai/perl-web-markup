=head1 NAME

Web::HTML::Validator - DOM Conformance Checker

=head1 SYNOPSIS

  use Web::HTML::Validator;
  my $val = Web::HTML::Validator->new;
  $val->onerror (sub {
    my %arg = @_;
    warn get_node_path ($arg{node}), ": ",
        ($arg{level} || "Error"), ": ",
        $arg{type}, "\n";
  });
  $val->check_node ($doc);

=head1 DESCRIPTION

The Perl module C<Web::HTML::Validator> contains methods for
conformance checking (or validation) of DOM tree with regard to
relevant Web standards such as HTML and CSS.  Although the module name
contains "HTML", it can also be used to check the conformance of
non-HTML XML documents.  See also L</SPECIFICATIONS>.

=head1 METHODS

This module has following methods:

=over 4

=item $val = Web::HTML::Validator->new

Create a new instance of the validator.

=item $val->check_node ($node)

Validate the specified node.  If the node is not a document node, the
node is validated as if it were an orphaned node, i.e. a node with no
parent or owner.  The node can be an attribute, but element- or
attribute-specific validation is not performed in that case.

Errors and warnings are reported through the C<onerror> handler.

=item $code = $val->onerror

=item $val->onerror ($code)

Get or set the error handler for the validator.  Any conformance
error, as well as warning and additional processing information, is
reported to the handler.  See
<https://github.com/manakai/data-errors/blob/master/doc/onerror.txt>
for details of error handling.

The value should not be set during the validation.  If the value is
changed, the result is undefined.

=item $boolean = $val->scripting

=item $val->scripting ($boolean)

Get or set scripting is enabled (true) or disabled (false) for the
purpose of validation.  By default, scripting is disabled.  It affects
validation of the HTML C<noscript> element.

The value should not be set during the validation.  If the value is
changed, the result is undefined.

=item $boolean = $val->image_viewable

=item $val->image_viewable ($boolean)

Get or set whether the intended user is known to be able to view
images or not.  Its default is false (I<not known>).  This affects
whether missing of the C<alt> attribute of the C<img> element is
conforming or not.

The value should not be set during the validation.  If the value is
changed, the result is undefined.

=back

Since the input to the validator is a DOM, not a string, syntax-level
conformance errors can't be checked.  For detecting any conformance
error, you have to parse the string using appropriate parser
(L<Web::HTML::Parser> for HTML, or L<Web::XML::Parser> for XML), and
then invoke the validator with the result DOM as the input.  For XML,
you might also want to invoke DTD validator between invocations of
parser and validator, as this validator does not perform any DTD-based
validation.

=head1 DEPENDENCY

In addition to the dependency described in the README file
<https://github.com/manakai/perl-web-markup/blob/master/README.pod#dependency>,
following modules (and modules required by them) are required by this
module:

=over 4

=item perl-web-css <https://github.com/manakai/perl-web-css>

=item perl-web-datetime <https://github.com/manakai/perl-web-datetime>

=item perl-web-langtag <https://github.com/manakai/perl-web-langtag>

=item perl-web-resource <https://github.com/manakai/perl-web-resource>

=item perl-web-url <https://github.com/manakai/perl-web-url>

=item perl-regexp-utils <https://github.com/wakaba/perl-regexp-utils>

=item perl-web-js <https://github.com/manakai/perl-web-js>

In addition, L<JE> is required.

=back

Also, see L<Web::RDF::XML::Parser>'s dependency section.

=head1 SPECIFICATIONS

=over 4

=item XML

Extensible Markup Language (XML) 1.0 <http://www.w3.org/TR/xml/>.

XML 1.0 Fifth Edition Specification Errata
<http://www.w3.org/XML/xml-V10-5e-errata>.

The C<xml:lang> attribute MUST be interpreted as the C<lang> attribute
in the XML namespace.  The C<xml:space> attribute MUST be interpreted
as the C<space> attribute in the XML namespace.  In other words, the
C<xml:lang> or C<xml:space> attribute in no namespace is different
from the attributes defined in the XML specification.

The C<xml:space> attribute MUST NOT be in error.

The description for the C<xml:lang> attribute value in the XML
specification is interpreted as a MUST-level requirement.

Reserved element names, attribute names, and target names MUST NOT be
used unless allowed by an applicable specification.

=item XMLNS

Namespaces in XML 1.0 <http://www.w3.org/TR/xml-names/>.

Namespaces in XML 1.0 (Third Edition) Errata
<http://www.w3.org/XML/2009/xml-names-errata>.

Requirements on the namespace name is updated as follows:

  A namespace name MUST be a valid non-empty URL
  <http://www.whatwg.org/specs/web-apps/current-work/#valid-non-empty-url>.
  It should be an absolute URL
  <http://url.spec.whatwg.org/#concept-absolute-url>.  For the purpose
  of conformance of the HTML |base| element, attributes declaring XML
  namespaces are not defined as taking URLs.

=item XMLBASE

XML Base <http://www.w3.org/TR/xmlbase/>.

XML Base Specification Errata
<http://www.w3.org/2009/01/xmlbase-errata>.

=item HTML

HTML Standard <http://c.whatwg.org/>.

The C<html> element in the HTML namespace MAY be used as the root
element.

A C<DocumentFragment> MAY contain any child element and text node.

The children of a C<template> element in the HTML namespace (which is
different from the template content of the element) MUST be empty.

Contents of the C<noscript> element when scripting is enabled and the
C<iframe> element MUST be validated as follows:

  Let /context/ be the element in question.

  Let /container/ be a new HTML element whose node document is same as
  the node document of /context/.  The local name of the element is
  the return value of the following substeps:

    If /context/ is an HTML |iframe| element, return |span|.

    Otherwise, if /context/ is a descendant of a |head| element or a
    descendant of a template content whose content model is metadata
    content, return |head|.

    Otherwise, if /context/ has a parent element and the content model
    of the parent element would require the content model of /context/
    be phrasing content given that /context/ were transparent, return
    |span|.

    Otherwise, return |div|.

  Invoke the HTML fragment parsing algorithm with /container/ as the
  /context/ element and the |textContent| attribute value of /context/
  as the /input/.  Append the returned list of nodes to /container/ in
  order.  If this step results in one or more parse errors, /context/
  is not conforming.

  Let /disallowed/ be an empty list.

  Add elements disallowed by content model of inclusive ancestors of
  /context/ to /disallowed/, if any.

  If /context/ is an HTML |iframe| element, add HTML |script| element
  to /disallowed/.

  If /context/ is an HTML |noscript| element, add HTML |noscript| and
  |script| elements to /disallowed/.

  Check the conformance of /container/ and its descendants, with the
  following exceptions:

    Elements in /disallowed/ MUST NOT be used.

    If /container/ is an HTML |head| element, it MUST contain only
    HTML |link|, |style|, and |meta| elements.  The |head| element
    does not require any |title| element.

Note that this is a willful violation to the HTML Standard to simplify
the validation process, as the spec's requirements are too complex to
implement nevertheless that complexity would not help authors as much.
The set of the validation errors detected by these steps is not
exactly same as that of the HTML Standard.

Unless otherwise specified, for the purpose of validation of HTML
documents or fragments (serialized in the HTML syntax and then)
embedded within other DOM attribute or node, such as the C<srcdoc>
attribute of the HTML C<iframe> element, and Atom or RSS elements,
whether scripting is enabled or disabled for the document associated
with the HTML parser used to parse the document or fragment, as well
as whether scripting is enabled or disabled for the nodes returned by
the HTML parser, is same as whether scripting is enabled or disabled
for the node document of the node.

=item OBSVOCAB

manakai's Conformance Checking Guideline for Obsolete HTML Elements
and Attributes
<http://suika.suikawiki.org/www/markup/html/exts/manakai-obsvocab>.

=item XSLT

XSL Transformations (XSLT) Version 1.0 <http://www.w3.org/TR/xslt>.

XSL Transformations (XSLT) Version 1.0 Specification Errata
<http://www.w3.org/1999/11/REC-xslt-19991116-errata/>.

Key words "must" and "should" are to be interpreted as described in
RFC 2119.

=item RDFXML

RDF/XML Syntax Specification (Revised)
<http://www.w3.org/TR/rdf-syntax-grammar/>.

RDF Errata
<http://www.w3.org/2001/sw/RDFCore/errata#rdf-syntax-grammar>.

The C<RDF> element in the RDF namespace is metadata content.

=item ATOM

The Atom Syndication Format <http://tools.ietf.org/html/rfc4287>,
<http://www.rfc-editor.org/errata_search.php?rfc=4287>.

The concepts in the first column of the following table are to be
interpreted as the second column of the same row:

  RFC 3066 language tag  -> BCP 47 language code
  IRI                    -> absolute URL [URL]
  IRI reference          -> URL [URL]
  MIME media type        -> MIME type [MINISNIFF]
  addr-spec              -> valid e-mail address [HTML]

A C<feed> element in the Atom namespace, when it contains no C<entry>
element in the Atom namespace as child, can but does not have to
contain a child C<author> element in the Atom namespace.  (Per RFC
4287 it is unclear whether there has to be an C<author> child element
or not when the C<feed> element contains no C<entry> element child.)

When the content of an element is HTML, it MUST conform to the
relevant specifications, using the rules for the HTML documents.  When
the content of an element is XHTML, it MUST conform to the relevant
specifications, using rules for the XHTML documents.  (Per RFC 4287,
these are SHOULD-level requirements.  Additionally, it references
obsolete specifications.)

Comments, inter-element whitespaces, and processing instructions MAY
be inserted anywhere in an Atom element.

Unless explicitly specified, elements and attributes MUST conform to
requirements described as the RELAX NG schema in the specification.
(Per RFC 4287, the RELAX NG schema is non-normative.)

Unless explicitly specified, no element or attribute MAY be used
unless there is any applicable specification for the element or
attribute, even if it is syntactically an extension element or
attribute.

=item ATOM03

The Atom Syndication Format 0.3 (PRE-DRAFT)
<https://github.com/mnot/I-D/blob/master/Published/atom-format/draft-nottingham-atom-format-02.xml>.

The concepts in the first column of the following table are to be
interpreted as the second column of the same row:

  RFC 3066 language tag  -> BCP 47 language code
  media type             -> MIME type [MIMESNIFF]
  W3C Date-Time string   -> RFC 3339 date-time in uppercase
  e-mail address         -> valid e-mail address [HTML]
  URI                    -> URL [URL]

=item ATOMTHREADS

Atom Threading Extension <http://tools.ietf.org/html/rfc4685>.

The concepts in the first column of the following table are to be
interpreted as the second column of the same row:

  media type             -> MIME type [MIMESNIFF]
  IRI                    -> URL [URL]

Comments and processing instructions MAY be inserted anywhere in an
Atom threading extension element.

=item ATOMHISTORY

Feed Paging and Archiving <https://tools.ietf.org/html/rfc5005>.

Elements C<fh:complete> and C<fh:archive> MAY be used as child of an
C<atom:feed> element at most once, respectively.

=item ATOMPUB

The Atom Publishing Protocol <https://tools.ietf.org/html/rfc5023>.

The concepts in the first column of the following table are to be
interpreted as the second column of the same row:

  IRI                    -> URL [URL]

Comments and processing instructions MAY be inserted anywhere in an
AtomPub element.

=item ATOMDELETED

The Atom "deleted-entry" Element <http://tools.ietf.org/html/rfc6721>.

The concepts in the first column of the following table are to be
interpreted as the second column of the same row:

  IRI                    -> URL [URL]

Comments and processing instructions MAY be inserted anywhere in an
Atom deleted-entry element.

=item CSSSTYLEATTR

CSS Style Attributes <http://dev.w3.org/csswg/css-style-attr/>.

CSS Syntax
<http://dev.w3.org/csswg/css-syntax/#parse-a-list-of-declarations>.

=item SCHEMAORG

Schema.org <http://schema.org/>.

Definitions are clarified as follows: An item value whose data type is
<http://schema.org/Integer> MUST be a valid integer.  An item value
whose data type is <http://schema.org/DateTime> MUST be a valid global
date and time string or a valid local date and time string.  An item
value whose data type is <http://schema.org/Date> MUST be a valid date
string.  An item value whose data type is <http://schema.org/Time>
MUST be a valid time string.  An item value whose data type is
<http://schema.org/URL> MUST be an absolute URL.

=item DATAVOCAB

data-vocabulary.org <http://www.data-vocabulary.org/>.

Structured data
<https://support.google.com/webmasters/topic/2643152?ref_topic=30163>.

Definitions are clarified as follows: If the value is defined as an
"ISO date", it MUST be a valid date string or a valid global date and
time string.  If the value is defined as an "ISO duration", it MUST be
a valid vevent duration string.  If the value is defined as a URL,
image, or link, it MUST be an absolute URL.

=item ARIA

Accessible Rich Internet Applications (WAI-ARIA) 1.0
<http://www.w3.org/WAI/PF/aria/complete>.

When an attribute value is defined as "token list", the value MUST be
a valid unordered set of unique space-separated tokens.

When an attribute value is defined as "ID reference list", the value
MUST be a valid ordered set of unique space-separated tokens.

=item MANAKAI

manakai DOM Extensions
<http://suika.suikawiki.org/~wakaba/wiki/sw/n/manakai%20DOM%20Extensions>.

Any node MAY be used as orphan node.

=item MIMESNIFF

MIME Sniffing <http://mimesniff.spec.whatwg.org/>.

=item URL

URL <http://url.spec.whatwg.org/>.

=item VALIDLANGS

Handling of unknown namespaces in conformance checking
<http://suika.suikawiki.org/www/markup/xml/validation-langs>.

=back

The validator also supports much more Web standards (indirectly via
required modules), including but not limited to CSS, URL Standard,
IETF BCP 47 language tags, and Encoding Standard.

Note that HTML 3.2, HTML4, XML 1.1, Namespaces in XML 1.1, C<xml:id>,
XLink, XInclude, XHTML1, XHTML Modularization, Ruby Annotations, RDFa,
XForms, and XHTML2 are not considered as applicable specifications.
The module does not support ARIA attributes in its own namespace.
Also, the module does not support historical HTML features no longer
part of the language, except for those explicitly listed in the
OBSVOCAB specification.  See the specification for details.

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 LICENSE

Copyright 2007-2014 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
