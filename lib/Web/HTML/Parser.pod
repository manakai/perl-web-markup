=head1 NAME

Web::HTML::Parser - An HTML parser

=head1 SYNOPSIS

  use Web::HTML::Parser;
  use Message::DOM::DOMImplementation;
  $parser = Web::HTML::Parser->new;
  $dom = Message::DOM::DOMImplementation->new;
  $doc = $dom->create_document;
  
  $parser->parse_char_string ($chars => $doc);
  $parser->parse_byte_string ($encoding, $bytes => $doc);

  ## Or, just use DOM attribute:
  $doc->manakai_is_html (1);
  $doc->inner_html ($chars);

=head1 DESCRIPTION

The C<Web::HTML::Parser> module is an implementation of the HTML
parser.  It implements the HTML parsing algorithm as defined by HTML
Living Standard.  Therefore, it's parsing behavior is fully compatible
with Web browsers with HTML5 parser enabled.

=head1 METHODS

It is recommended to use standard DOM interface, such as C<inner_html>
method of the C<Document> object, to parse an HTML string, where
possible.  The L<Web::HTML::Parser> module, which, in fact, is used
to implement the C<inner_html> method, offers more control on how
parser behaves, which would not be useful unless you are writing a
complex user agent such as browser or validator.

The L<Web::HTML::Parser> module provides following methods:

=over 4

=item $parser = Web::HTML::Parser->new

Create a new parser.

=item $parser->parse_char_string ($chars => $doc)

Parse a string of characters (i.e. a possibly utf8-flagged string) as
HTML and construct the DOM tree.

The first argument to the method must be a string to parse.  It may or
may not be a valid HTML document.

The second argument to the method must be a DOM C<Document> object
(L<Message::DOM::Document>).  Any child nodes of the document is first
removed by the parser.

=item $parser->parse_byte_string ($encoding, $bytes => $doc)

Parse a string of bytes as HTML and construct the DOM tree.

The first argument to the method is the character encoding of the
document, if known, or C<undef>.  See also L</SPECIFYING ENCODING>.

The second argument to the method must be a string to parse.  It may
or may not be a valid HTML document.

The third argument to the method must be a DOM C<Document> object
(L<Message::DOM::Document>).  Any child nodes of the document is first
removed by the parser.

=item $node_list = $parser->parse_char_string_with_context ($chars, $context, $empty_doc)

Parse a string of characters using the context node I<$context>, using
the empty document I<$empty_doc>.

The first argument to the method must be a string of characters.  The
second argument must be an element or C<undef>.

The method returns the result node list.

=item $parser->locale_tag ($string)

=item $string = $parser->locale_tag

Get or set the BCP 47 language tag for the locale used to parse the
document, e.g. C<en>, C<ja>, C<zh-tw>, and C<zh-cn>.  It is used to
determine the default character encoding (that is only used when
character encoding cannot be determined by other means).

If C<undef> is specified (or the C<locale_tag> method is not
explicitly invoked at all), the default is "none", which results in
the C<windows-1252> character encoding default.

Except for the C<zh-tw> and C<zh-cn>, only the primary language tag
(i.e. a language code with no C<-> and subtags) should be specified.
Tags are compared ASCII case-insensitively.

XXX Future revision of the parser might also use the locale language
tag to insert localized text for C<isindex> tag.

=item $string = $parser->known_definite_encoding

=item $parser->known_definite_encoding ($string)

Get or set a known character encoding used to parse the document.  See
also L</SPECIFYING ENCODING>.

=item $code = $parser->onerror

=item $parser->onerror ($new_code)

Get or set the error handler for the parser.  Any parse error, as well
as warning and additional processing information, is reported to the
handler.  See
<https://github.com/manakai/data-errors/blob/master/doc/onerror.txt>
for details of error handling.

=item $parser->throw ($code)

Terminate the parser and run the specified code reference.  The code
reference must throw an exception.

If the error handler specified by the C<onerror> method throw an
exception, it must not be directly thrown and this method must be used
instead.  Otherwise resources used by the parser is not destroyed due
to the unexpected termination.

=back

Parsed document structure is reflected to the C<Document> object
specified as an argument to parse methods.  The character encoding
used to parse the document can be retrieved by the C<input_encoding>
method of the C<Document>.

Although the parser is intended to be fully conformant to the HTML
Living Standard, it might not implement latest spec changes yet.  See
list of bugs on the HTML parser
<http://manakai.g.hatena.ne.jp/task/2/> for the current implementation
status.

=head1 SPECIFYING ENCODING

The input to the C<parse_char_*> methods are a string of characters.
It is always interpreted as a Perl string (utf8 or latin1).

The input to the C<parse_byte*> methods are a string of bytes, where
characters are encoded in some Web-compatible character encoding.  It
is decoded as specified by HTML and Encoding standards.

The C<parse_byte*> methods accept a character encoding label as one of
arguments.  It is interpreted as the transport layer character
encoding metadata.  In HTTP, it is the value of the C<charset>
parameter in the C<Content-Type> header.  If it is unknown, the
argument must be set to C<undef>.  Note that in some cases this
encoding metadata is ignored, as specified in HTML Standard.

The C<known_definite_encoding> method can be used to set a known
definite encoding.  If its value is not C<undef>, it is used to decode
the document.  This takes precedence over the transport layer
character encoding metadata and is always respected.

The character encoding, if specified, must be represented by one of
its labels, defined by the Encoding Standard.  Unknown labels are
ignored.  Examples of labels include (but not limited to): C<utf-8>,
C<windows-1252>, C<shift_jis>, C<euc-jp>, C<iso-2022-jp>, and
C<gb18030>.  Encoding labels are ASCII case-insensitive.

If none of these character encoding metadata is provided,
C<parse_byte*> methods try to detect the character encoding in use by
the steps specified in HTML Standard.  It also takes the locale
information of the C<locale_tag> method into account.

=head1 SEE ALSO

L<Message::DOM::Document>, L<Message::DOM::Element>.

L<Web::HTML::Serializer>.

L<Web::HTML::Validator>.

L<Web::XML::Parser>.

See
<http://suika.suikawiki.org/~wakaba/wiki/sw/n/manakai++Predefined%20User%20Data%20Names>
for details of source location annotations using DOM3 user data.

=head1 SPECIFICATIONS

=over 4

=item HTML

HTML Living Standard - Parsing HTML documents
<http://www.whatwg.org/specs/web-apps/current-work/#parsing>.

HTML Living Standard - Parsing HTML fragments
<http://www.whatwg.org/specs/web-apps/current-work/#parsing-html-fragments>.

Document.prototype.innerHTML
<http://html5.org/tools/web-apps-tracker?from=6531&to=6532>.

=item DOMPARSING

DOM Parsing and Serialization <http://domparsing.spec.whatwg.org/>.

=item ENCODING

Encoding Standard <http://encoding.spec.whatwg.org/>.

=item MANAKAI

manakai's DOM Extensions
<http://suika.suikawiki.org/~wakaba/wiki/sw/n/manakai++DOM%20Extensions>.

=back

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 LICENSE

Copyright 2007-2014 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
