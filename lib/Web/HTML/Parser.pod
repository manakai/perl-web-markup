=head1 NAME

Web::HTML::Parser - An HTML parser

=head1 SYNOPSIS

  use Web::HTML::Parser;
  use Web::DOM::Document;
  $parser = Web::HTML::Parser->new;
  $doc = Web::DOM::Document->new;
  
  $parser->parse_char_string ($chars => $doc);
  $parser->parse_byte_string ($encoding, $bytes => $doc);

  ## Or, just use DOM attribute:
  $doc->manakai_is_html (1);
  $doc->inner_html ($chars);

=head1 DESCRIPTION

The C<Web::HTML::Parser> module is an HTML parser, as specified by the
HTML Standard (i.e. an "HTML5" parser), written in pure Perl.

This module provides a low-level API to the parser, which accepts byte
or character sequence as input and construct DOM tree as output,
optionally reporting errors and warnings detected during the parsing.
Applications such as browsers, data mining tools, validators, and so
on, can use this module directly.  However, it is encouraged to use
higher-level APIs such as DOM C<inner_html> method (see
L<Web::DOM::ParentNode> in the perl-web-dom package, for example).

=head1 METHODS

The L<Web::HTML::Parser> module has following methods:

=over 4

=item $parser = Web::HTML::Parser->new

Create a new parser.

=item $parser->parse_char_string ($chars => $doc)

Parse a character string as HTML.  The first argument must be a
character string (i.e. a latin1 or utf8 string).  The second argument
must be a DOM C<Document> object.  The C<Document> is to be mutated
during the parsing.

See <https://github.com/manakai/perl-web-markup#dependency> for the
requirements on the C<Document> object.

=item $parser->parse_byte_string ($encoding, $bytes => $doc)

Parse a byte string as HTML.  The first argument must be a character
encoding label fo the byte string, if any, or C<undef> (See
L</SPECIFYING ENCODING>).  The second argument must be a byte string.
The third argument must be a DOM C<Document> object.  The C<Document>
is to be mutated during the parsing.

See <https://github.com/manakai/perl-web-markup#dependency> for the
requirements on the C<Document> object.

=item $node_list = $parser->parse_char_string_with_context ($chars, $context, $empty_doc)

Parse a character string as HTML in the specified context.  The first
argument must be a character string (i.e. a latin1 or utf8 string).
The second argument must be an C<Element> object used as the context,
or C<undef> if there is no context.  The third argument must be an
empty C<Document> object used in the parsing.  Note that the
C<Document>'s children list is not to be affected by the parsing.  The
method returns an C<HTMLCollection> object containing the result of
the parsing (zero or more C<Node> objects).

This method can be used to implement the C<inner_html> method of an
C<Element>.

See <https://github.com/manakai/perl-web-markup#dependency> for the
requirements on the C<Document> and C<Element> objects.

=item $parser->locale_tag ($string)

=item $string = $parser->locale_tag

Get or set the BCP 47 language tag for the locale used to parse the
document, e.g. C<en>, C<ja>, C<zh-tw>, and C<zh-cn>.  It is used to
determine the default character encoding (which is only used when
character encoding cannot be determined by other means).

If C<undef> is specified (or the C<locale_tag> method is not
explicitly invoked at all), the default is "none", which results in
the C<windows-1252> character encoding default.

Except for the C<zh-tw> and C<zh-cn>, only the primary language tag
(i.e. a language code with no C<-> and subtags) should be specified.
Tags are compared ASCII case-insensitively.

The value should not be set while the parser is running.  If the value
is changed, the result is undefined.

=item $string = $parser->known_definite_encoding

=item $parser->known_definite_encoding ($string)

Get or set a known character encoding used to parse the document.  See
also L</SPECIFYING ENCODING>.

The value should not be set while the parser is running.  If the value
is changed, the result is undefined.

=item $boolean = $parser->scripting

=item $parser->scripting ($boolean)

Set whether the scripting flag of the parser is "enabled" or not.  By
default the value is "disabled" (false).  If the value is "enabled",
the C<noscript> element's content is not parsed (This is how browsers
parse the document by default).  Otherwise the content is parsed as
normal.

The value should not be set while the parser is running.  If the value
is changed, the result is undefined.

=item $code = $parser->onerror

=item $parser->onerror ($new_code)

Get or set the error handler for the parser.  Any parse error, as well
as warning and additional processing information, is reported to the
handler.  See
<https://github.com/manakai/data-errors/blob/master/doc/onerror.txt>
for details of error handling.

The code is not expected to throw any exception.  See also C<throw>.

The value should not be set while the parser is running.  If the value
is changed, the result is undefined.

=item $parser->throw ($code)

Terminate the parser and run the specified code reference.  The code
reference must throw an exception.

When the error handler specified by the C<onerror> method is intended
to abort the parsing, it must invoke this method and return.
Otherwise resources used by the parser might not be destroyed due to
the unexpected termination.

=back

The module also has following methods for API compatibility with
L<Web::XML::Parser> but they have no effect: C<max_entity_depth>,
C<max_entity_expansions>.

=begin comment

XXX Following methods are not yet documented, as the API is not stable
until it is proved that document.write (for HTML) and entity expansion
(for XML) are implementable (with some additions to these methods).

$parser->di_data_set
$parser->di

$parser->onerrors
$parser->onappcacheselection
$parser->onscript
$parser->onelementspopped
$parser->onrestartwithencoding
$parser->onextentref
$parser->restart
$parser->cant_expand_extentref

$parser->parse_chars_start
$parser->parse_chars_feed
$parser->parse_chars_end

$parser->parse_bytes_start
$parser->parse_bytes_feed
$parser->parse_bytes_end

$parser->strict_checker

Also, need to add a section on how to determine the node's source
location and errors' source location using |di| and |index|,
referencing index data structure doc [MANAKAIINDEX] and
L<Web::HTML::SourceMap> API.

=end comment

=head1 SPECIFYING ENCODING

The input to the C<parse_char_*> methods are a string of characters.
It is always interpreted as a Perl character string (utf8 or latin1).

The input to the C<parse_byte*> methods are a string of bytes, where
characters are encoded in some Web-compatible character encoding.  It
is decoded as specified by HTML and Encoding standards.

The C<parse_byte*> methods accept a character encoding label as one of
arguments.  It is interpreted as the transport layer character
encoding metadata.  In HTTP, it is the value of the C<charset>
parameter in the C<Content-Type> header.  If it is unknown, the
argument must be set to C<undef>.  Note that in some cases this
encoding metadata is ignored, as specified in HTML Standard.

The C<known_definite_encoding> method can be used to set a known
definite encoding.  If its value is not C<undef>, it is used to decode
the document.  This takes precedence over the transport layer
character encoding metadata and is always respected.

The character encoding, if specified, must be represented by one of
its labels, defined by the Encoding Standard.  Unknown labels are
ignored.  Examples of labels include (but not limited to): C<utf-8>,
C<windows-1252>, C<shift_jis>, C<euc-jp>, C<iso-2022-jp>, and
C<gb18030>.  Encoding labels are ASCII case-insensitive.

If none of these character encoding metadata is provided,
C<parse_byte*> methods try to detect the character encoding in use by
the steps specified in HTML Standard.  It also takes the locale
information of the C<locale_tag> method into account.

=head1 SEE ALSO

L<Web::DOM::Document>, L<Web::DOM::Element> in the perl-web-dom
package.

L<Web::HTML::Serializer>.

L<Web::HTML::Validator>.

L<Web::XML::Parser>.

=head1 SPECIFICATIONS

=over 4

=item HTML

HTML Standard <http://www.whatwg.org/specs/web-apps/current-work/>.

=item DOCUMENTINNERHTML

Document.prototype.innerHTML
<http://html5.org/tools/web-apps-tracker?from=6531&to=6532>.

=item DOMPARSING

DOM Parsing and Serialization <http://domparsing.spec.whatwg.org/>.

=item ENCODING

Encoding Standard <http://encoding.spec.whatwg.org/>.

=item MANAKAI

manakai DOM Extensions
<http://suika.suikawiki.org/~wakaba/wiki/sw/n/manakai++DOM%20Extensions>.

=item MANAKAIINDEX

manakai index data structure
<http://wiki.suikawiki.org/n/manakai%20index%20data%20structures>.

=back

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 LICENSE

Copyright 2007-2015 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
