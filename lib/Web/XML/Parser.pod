=head1 NAME

Web::XML::Parser - An XML parser

=head1 SYNOPSIS

  use Web::XML::Parser;
  use Web::DOM::Document;
  $parser = Web::XML::Parser->new;
  $doc = Web::DOM::Document->new;
  
  $parser->parse_char_string ($chars => $doc);
  $parser->parse_byte_string ($encoding, $bytes => $doc);

  ## Or, just use DOM attribute:
  $doc->inner_html ($chars);

=head1 DESCRIPTION

The C<Web::XML::Parser> module is an XML parser, supporting XML 1.0
and XML Namespaces 1.0, written in pure Perl.

This parser is inspired by the HTML Standard and the draft XML5
specification.  It is not a Draconian parser; it does not abort the
parsing just because of a well-formedness error but does try to
recover from the error.

This module provides a low-level API to the parser, which accepts byte
or character sequence as input and construct DOM tree as output,
optionally reporting errors and warnings detected during the parsing.
Applications such as browsers, data mining tools, validators, and so
on, can use this module directly.  However, it is encouraged to use
higher-level APIs such as DOM C<inner_html> method (see
L<Web::DOM::ParentNode> in the perl-web-dom package, for example).

=head1 METHODS

The L<Web::XML::Parser> module provides following methods:

=over 4

=item $parser = Web::XML::Parser->new

Create a new parser.

=item $parser->parse_char_string ($chars => $doc)

Parse a character string as XML.  The first argument must be a
character string (i.e. a latin1 or utf8 string).  The second argument
must be a DOM C<Document> object.  The C<Document> is to be mutated
during the parsing.

See <https://github.com/manakai/perl-web-markup#dependency> for the
requirements on the C<Document> object.

=item $parser->parse_byte_string ($encoding, $bytes => $doc)

Parse a byte string as XML.  The first argument must be a character
encoding label fo the byte string, if any, or C<undef> (See
L</SPECIFYING ENCODING>).  The second argument must be a byte string.
The third argument must be a DOM C<Document> object.  The C<Document>
is to be mutated during the parsing.

See <https://github.com/manakai/perl-web-markup#dependency> for the
requirements on the C<Document> object.

=item $node_list = $parser->parse_char_string_with_context ($chars, $context, $empty_doc)

Parse a character string as XML in the specified context.  The first
argument must be a character string (i.e. a latin1 or utf8 string).
The second argument must be an C<Element> object used as the context,
or C<undef> if there is no context.  The third argument must be an
empty C<Document> object used in the parsing.  Note that the
C<Document>'s children list is not to be affected by the parsing.  The
method returns an C<HTMLCollection> object containing the result of
the parsing (zero or more C<Node> objects).

This method can be used to implement the C<inner_html> method of an
C<Element>.

See <https://github.com/manakai/perl-web-markup#dependency> for the
requirements on the C<Document> and C<Element> objects.

=item $string = $parser->known_definite_encoding

=item $parser->known_definite_encoding ($string)

Get or set a known character encoding used to parse the document.  See
also L</SPECIFYING ENCODING>.

The value should not be set while the parser is running.  If the value
is changed, the result is undefined.

=item $code = $parser->onerror

=item $parser->onerror ($new_code)

Get or set the error handler for the parser.  Any parse error, as well
as warning and additional processing information, is reported to the
handler.  See
<https://github.com/manakai/data-errors/blob/master/doc/onerror.txt>
for details of error handling.

The code is not expected to throw any exception.  See also C<throw>.

The value should not be set while the parser is running.  If the value
is changed, the result is undefined.

=item $parser->throw ($code)

Terminate the parser and run the specified code reference.  The code
reference must throw an exception.

When the error handler specified by the C<onerror> method is intended
to abort the parsing, it must invoke this method and return.
Otherwise resources used by the parser might not be destroyed due to
the unexpected termination.

=item $parser->max_entity_depth ($integer)

=item $integer = $parser->max_entity_depth

Get or set the maximum depth of nested entities to be expanded.  The
value must be a non-negative integer.

=item $parser->max_entity_expansions ($integer)

=item $integer = $parser->max_entity_expansions

Get or set the maximum number of entity references to be expanded.
The value must be a non-negative integer.  Note that predefined
entities and HTML character entities are always expanded and not taken
into account for the number of entity expansions.

=item $parser->ignore_doctype_pis ($boolean)

=item $boolean = $parser->ignore_doctype_pis

Get or set whether processing instructions in the DTD should be
exposed to the DOM or not.  If true, the C<DocumentType> object, if
any, contains no child node even when there are processing
instructions in the DTD.

=back

=begin comment

See also L<Web::HTML::Parser>'s comment section.

Also, $parser->di_data_set->[$parser->di]->{url} is expected to
contain the absolute URL of the input, possibly after applying any
redirect.  It is also used as base URL.

=end comment

The module also has following methods for API compatibility with
L<Web::HTML::Parser> but they have no effect: C<locale_tag>,
C<scripting>, C<is_xhr>.

=head1 SPECIFYING ENCODING

The input to the C<parse_char_*> methods are a string of characters.
It is always interpreted as a Perl character string (utf8 or latin1).

The input to the C<parse_byte*> methods are a string of bytes, where
characters are encoded in some Web-compatible character encoding.  It
is decoded as specified by Encoding standards.

The C<parse_byte*> methods accept a character encoding label as one of
arguments.  It is interpreted as the transport layer character
encoding metadata.  In HTTP, it is the value of the C<charset>
parameter in the C<Content-Type> header.  If it is unknown, the
argument must be set to C<undef>.

The C<known_definite_encoding> method can be used to set a known
definite encoding.  If its value is not C<undef>, it is used to decode
the document.  This takes precedence over the transport layer
character encoding metadata and is always respected.

The character encoding, if specified, must be represented by one of
its labels, defined by the Encoding Standard.  Unknown labels are
ignored.  Examples of labels include (but not limited to): C<utf-8>,
C<windows-1252>, C<shift_jis>, C<euc-jp>, C<iso-2022-jp>, and
C<gb18030>.  Encoding labels are ASCII case-insensitive.

=head1 SEE ALSO

L<Web::DOM::Document>, L<Web::DOM::Element> in the perl-web-dom
package.

L<Web::XML::Serializer>.

L<Web::HTML::Validator>, L<Web::XML::DTDValidator>.

L<Web::HTML::Parser>.

See
<http://suika.suikawiki.org/~wakaba/wiki/sw/n/manakai++Predefined%20User%20Data%20Names>
for details of source location annotations using DOM3 user data.

=head1 SPECIFICATIONS

=over 4

=item XML

XML 1.0 <https://www.w3.org/TR/xml/>.

=item XMLNS

Namespaces in XML 1.0 <https://www.w3.org/TR/xml-names/>.

=item INFOSET

XML Information Set <https://www.w3.org/TR/xml-infoset/>.

DOM Level 3 Core - Infoset Mapping
<https://www.w3.org/TR/DOM-Level-3-Core/infoset-mapping.html>.

=item XML5

XML5 Standard <https://ygg01.github.io/xml5_draft/>.

=item HTML

HTML Standard <https://html.spec.whatwg.org/>.

The XML fragment parsing algorithm must return the children of the
template content of the root element of the resulting C<Document>, in
tree order, if the /context/ element is an HTML C<template> element.

=item DOMDTDEF

XML processing and DOM Document Type Definitions
<https://suika.suikawiki.org/www/markup/xml/domdtdef/domdtdef-work>.

=item MANAKAI

manakai DOM Extensions
<https://suika.suikawiki.org/~wakaba/wiki/sw/n/manakai%20DOM%20Extensions>.

=back

Note that there is no single specification that completely defines XML
parsing.

XML 1.1 is no longer supported.

See also L<Web::XML::DTDValidator>.

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 LICENSE

Copyright 2007-2017 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

This library derived from a JSON file, which contains data extracted
from HTML Standard.  "Written by Ian Hickson (Google, ian@hixie.ch) -
Parts Â© Copyright 2004-2014 Apple Inc., Mozilla Foundation, and Opera
Software ASA; You are granted a license to use, reproduce and create
derivative works of this document."

=cut
